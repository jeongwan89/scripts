#! /bin/bash

# convertatemp -- 온도 변환 스크립트
# 사용자가 온도를 화씨나 섭씨, 절대 온도로 입력하면
# 해당 온도를 나머지 두 가지 단위로 출력한다.

if [ $# -eq 0 ] ; then
  cat << EOF >&2
Usage: $0 temperature[F|C|K]
where the suffix:
   F    indicates input is in Fahrenheit 
   C    indicates input is in Celsius (default)
   K    indicates input is in Kelvin
EOF
  exit 1
fi

unit="$(echo $1|sed -e 's/[-[:digit:]]*//g' | tr '[:lower:]' '[:upper:]' )"
temp="$(echo $1|sed -e 's/[^-[:digit:]]*//g')"
# sed 이해 : sed의 히환은 언제나 s/old/new/로 나타나는데, 여기서 old 패턴은 -가 0번 이상 출현하고,
# 그 뒤에 숫자들이 따라 나오는 것이다([:digit:]이 임의의 숫자를 나타내는 ANSI 문자셋 표기법이고,
# *는 그 앞의 패턴이 0개 이상 나옴을 나타낸다.). new 패턴은 old 패턴을 교체하고자 하는 패턴이다.
# 이 경우는 간단히 //로, 빈 패턴을 뜻한다. 이 패턴은 old패턴을 제거하고 싶을 때 유용하다.
# 이 치환은 실질적으로 모든 숫자를 제거함으로써, -31f와 같은 입력을 f로 바꿔 단위의 종류를 알려준다.
# 마지막으로 tr 멸영은 모든 것을 대문자로 정규화한다. 즉, -31f는 F가 된다.

# 또 다른 sed 식은 반대 동작을 한다. ^ 연산자를 이용해 [:digit] 클래스에 속하지 않는 문자를 찾아
# 숫자가 아닌 모든 것을 제거한다 (참고로 대부분의 언어는 부정을 위해 !를 사용한다). 
# 이는 적절한 수식을 통해 최종적으로 변환할 값을 제공한다.

case ${unit:=C} # ":= "이 수식 참고. 만약 unit이 없거나 정해지지 않으면 F를 지정한다.
in
  F ) # Fahrenheit to Celsius formula:  Tc = (F - 32) / 1.8
  farn="$temp"
  cels="$(echo "scale=2;($farn - 32) / 1.8" | bc)"
  kelv="$(echo "scale=2;$cels + 273.15" | bc)"
  ;;

  C ) # Celsius to Fahrenheit formula: Tf = (9/5)*Tc+32
  cels=$temp
  kelv="$(echo "scale=2;$cels + 273.15" | bc)"
  farn="$(echo "scale=2;(1.8 * $cels) + 32" | bc)"
  ;;

  K ) # Celsius = Kelvin - 273.15, then use Cels -> Fahr formula
  kelv=$temp
  cels="$(echo "scale=2; $kelv - 273.15" | bc)"
  farn="$(echo "scale=2; (1.8 * $cels) + 32" | bc)"
  ;;

  *)
  echo "Given temperature unit is not supported"
  exit 1
esac  

echo "Fahrenheit = $farn"
echo "Celsius    = $cels"
echo "Kelvin     = $kelv"

exit 0